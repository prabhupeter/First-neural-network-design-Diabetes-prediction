# -*- coding: utf-8 -*-
"""First neural network design | Diabetes prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Br6ex0SU9W5XEegUHg_a0qua5611MZ5h
"""

'''
   1. Number of times pregnant
   2. Plasma glucose concentration a 2 hours in an oral glucose tolerance test
   3. Diastolic blood pressure (mm Hg)
   4. Triceps skin fold thickness (mm)
   5. 2-Hour serum insulin (mu U/ml)
   6. Body mass index (weight in kg/(height in m)^2)
   7. Diabetes pedigree function
   8. Age (years)
   9. Class variable (0 or 1)

from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense
from keras.models import model_from_json

dataset = loadtxt('/content/drive/MyDrive/deep learning/pima-indians-diabetes.csv', delimiter=',')
print(dataset)

"""# train"""

x = dataset[:,0:8]   #Input
y = dataset[:,8]    #Output

print("Input",x)
print("Output",y)

model = Sequential()

model.add(Dense(12, input_dim=8, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

#Model Training
model.fit(x, y, epochs=100, batch_size=20)

#Evaluation
_, accuracy = model.evaluate(x, y)
print('Accuracy: %.2f' % (accuracy*100))

#Model Save
model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
model.save_weights("model.weights.h5")
print("Saved model to disk")

"""# **test **"""

from numpy import loadtxt
from keras.models import model_from_json

dataset = loadtxt('/content/drive/MyDrive/deep learning/pima-indians-diabetes.csv', delimiter=',')

x = dataset[:,0:8]    #Input
y = dataset[:,8]      #Output

json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
model = model_from_json(loaded_model_json)
model.load_weights("model.weights.h5")
print("Loaded model from disk")

predictions = model.predict(x)

for i in range(20,25):
	print('%s => %d (expected %d)' % (x[i].tolist(), predictions[i], y[i]))

